package com.github.shixiaoyanger.miraiBot.command.customCommand

import cn.hutool.core.io.IORuntimeException
import com.github.shixiaoyanger.miraiBot.bot.BotData
import com.github.shixiaoyanger.miraiBot.bot.BotData.serviceLogger
import com.github.shixiaoyanger.miraiBot.bot.Group.Companion.getGroup
import com.github.shixiaoyanger.miraiBot.bot.User.Companion.getUser
import com.github.shixiaoyanger.miraiBot.command.ChatCommand
import com.github.shixiaoyanger.miraiBot.utils.RssUtil.getImage
import com.github.shixiaoyanger.miraiBot.utils.RssUtil.getRsshubSource
import com.github.shixiaoyanger.miraiBot.utils.build
import com.rometools.rome.io.ParsingFeedException
import kotlinx.coroutines.runBlocking
import net.mamoe.mirai.event.events.FriendEvent
import net.mamoe.mirai.event.events.GroupEvent
import net.mamoe.mirai.event.events.GroupTempMessageEvent
import net.mamoe.mirai.event.events.MessageEvent
import net.mamoe.mirai.message.data.MessageChain
import net.mamoe.mirai.message.data.MessageChainBuilder
import net.mamoe.mirai.message.data.buildMessageChain
import net.mamoe.mirai.utils.ExternalResource.Companion.uploadAsImage

class RsshubCommand : ChatCommand {
    override suspend fun execute(event: MessageEvent, args: List<String>): MessageChain {
        //TODO help
        if (args.size < 2) {
            return buildMessageChain { add(getHelp()) }
        }
        return when (args[1]) {
            "ËÆ¢ÈòÖ", "sub" -> subscribe(args.getOrNull(2), event)
            "ÈÄÄËÆ¢", "unsub" -> unSubscribe(args.getOrNull(2), event)
            "ÂàóË°®", "list" -> listSubscribe(event)

            else -> buildMessageChain { add(getHelp()) }
        }

    }

    override fun getPrefix(): List<String> {
        return listOf("rss", "rsshub")
    }

    override fun getName(): String {
        return "/rss ÔºàrssËÆ¢ÈòÖÔºâ"
    }

    override fun getHelp(): String {
        return """
            Ê¨¢Ëøé‰ΩøÁî®rssËÆ¢ÈòÖÂäüËÉΩ
            
            üîπ /rss ËÆ¢ÈòÖ/sub rssÈìæÊé•
            üîπ /rss ÈÄÄËÆ¢/unsub rssÈìæÊé•
            üîπ /rss ÂàóË°®/list
            üîπ /rss Â∏ÆÂä©/help
            üîπ /rss Ê∫ê
            Ôºà‰∫ÜËß£Â¶Ç‰ΩïËé∑ÂèñrssÊ∫êÔºâ
            
            ‰ΩøÁî®Ê†∑‰æãÔºö
            /rss ËÆ¢ÈòÖ https://rakuen.thec.me/PixivRss/daily-10
            
            ÊèêÁ§∫Ôºö
            üî∏ ÊØè‰∏™ÂèÇÊï∞‰πãÈó¥Áî®‰∏Ä‰∏™Á©∫Ê†ºÈöîÂºÄ
        """.trimIndent()
    }

    private fun subscribe(url: String?, event: MessageEvent): MessageChain {
        val message = MessageChainBuilder()

        url ?: return message.build("Áº∫Â∞ëÂèÇÊï∞ÔºöËÆ¢ÈòÖÈìæÊé•")

        try {
            val feed = getRsshubSource(url)
            if (!BotData.rsshubFeeds.containsKey(url)) {
                BotData.rsshubFeeds[url] = feed
            }
            when (event) {
                //TODO Á°ÆËÆ§‰∫ã‰ª∂‰∏™Êï∞
                is GroupEvent -> getGroup(event.subject.id).rsshubSubscribeLinks.add(url)
                is FriendEvent, is GroupTempMessageEvent -> getUser(event.subject.id).rsshubSubscribeLinks.add(url)
            }

            message.add("ËÆ¢ÈòÖÊàêÂäü!\n")
            message.add("ËÆ¢ÈòÖ‰∏ªÈ¢òÔºö${feed.title}\n")
            feed.items.getOrNull(0)?.let { entry ->
                message.add("Ê†áÈ¢òÔºö${entry.title}\n")
                runBlocking { getImage(entry.imageUrl)?.use { message.add(it.uploadAsImage(event.subject)) } }
                message.add("${entry.description}\n")
                message.add("ÂÜÖÂÆπÈìæÊé•Ôºö${entry.link}")
            }

        } catch (e: Exception) {

            when (e) {
                // feedËß£ÊûêÂ§±Ë¥•
                is ParsingFeedException -> {
                    message.add("Ëß£ÊûêÂ§±Ë¥•ÔºåËØ∑Êèê‰æõÊúâÊïàÁöÑrssÊ∫ê")
                }
                // ËØ∑Ê±ÇË∂ÖÊó∂ |
                is IORuntimeException -> {
                    message.add("rssÈìæÊé•ËÆøÈóÆË∂ÖÊó∂Ôºå‰Ω†ÂèØ‰ª•ÂÜçËØï‰∏ÄÊ¨°")
                }
                else -> {
                    serviceLogger.error("RsshubCommand Êú™Áü•ÈîôËØØ ${e.message} ${e.stackTrace}", e)
                    message.add("ÂëúÂëúÔºåÂèëÁîü‰∫Ü‰∏Ä‰∫õÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØï")
                }

            }
        }
        return message.build()
    }

    private fun unSubscribe(url: String?, event: MessageEvent): MessageChain {
        val message = MessageChainBuilder()

        url ?: return message.build("Áº∫Â∞ëÂèÇÊï∞ÔºöËÆ¢ÈòÖÈìæÊé•")

        val deleted = when (event) {
            //TODO Á°ÆËÆ§‰∫ã‰ª∂‰∏™Êï∞
            is GroupEvent -> getGroup(event.subject.id).rsshubSubscribeLinks.remove(url)
            is FriendEvent -> getUser(event.subject.id).rsshubSubscribeLinks.remove(url)
            else -> false
        }

        return if (deleted) {
            message.build("ÈÄÄËÆ¢ÊàêÂäüÔºÅ")
        } else {
            message.build("‰Ω†Ê≤°ÊúâËÆ¢ÈòÖÔºåËØ∑ÈáçËØïÔºÅ")
        }
    }


    private fun listSubscribe(event: MessageEvent): MessageChain {
        val message = MessageChainBuilder()
        val subscribeLinks =
                when (event) {
                    //TODO Á°ÆËÆ§‰∫ã‰ª∂‰∏™Êï∞
                    is GroupEvent -> getGroup(event.subject.id).rsshubSubscribeLinks
                    is FriendEvent -> getUser(event.subject.id).rsshubSubscribeLinks

                    else -> emptySet()
                }
        subscribeLinks.forEach { link ->
            val feed = BotData.rsshubFeeds[link]
            feed?.let {
                message.add("${it.title}  ${it.subscribeUrl}\n")
            }
        }

        return message.build("‰Ω†ËøòÊ≤°Êúâ‰ªª‰ΩïËÆ¢ÈòÖÂì¶ÔºÅ")
    }

}